classdef SESimulatorEngine < handle
    properties
        fleet % SEFleet object
        minefield % SEMinefield object
        numShips % Number of ships in the fleet
        numMines % Number of mines in the minefield
        boundary_box % Boundary box:  [x-coordinate, y-coordinate, width, height]
        axes_h % Graphics Handle for axes things will be drawn to
        fps = 20; % desired frames per second
        mineDamageRange % Mine damage radius
        mineDetectionRange % mine detection range
    end
    
    methods
        function obj = SESimulatorEngine(boundary_box, axes_handle)
            narginchk(0, 2);

            % Create fleet
            obj.fleet = SEFleet();            
            % Create minefield
            obj.minefield = SEMinefield();

            % initialize as applicable based on the number of input arguments
            if nargin>0
                obj.setBoundary(boundary_box);

                if nargin>1

                    obj.setAxesHandle(axes_handle);
                end
            end            
        end

        function setBoundary(obj, boundary_box)
            obj.fleet.setBoundary(boundary_box);
            obj.minefield.setBoundary(boundary_box);
        end

        function setAxesHandle(obj, axes_h)
            obj.fleet.setAxesHandle(axes_h);
            obj.minefield.setAxesHandle(axes_h);
        end

        % TODO: talk with the fleet team and ensure they have this function
        function setFleetBehavior(obj, behavior)
            obj.fleet.setBehavior(behavior);
        end

        % TODO: talk with the mine field team and ensure they have this function
        function setMinefieldBehavior(obj, behavior)
            obj.minefield.setBehavior(behavior);
        end

        % TODO: Update with similar data validation for all callbacks in
        % GUI (must match name sent from GUI)
        function didSet = setNumMines(obj, numMines)
            didSet = false;
            if nargin>1 && ~isempty(numMines) && numMines>= 0
                obj.numMines = floor(numMines);
                obj.minefield.setNumMines(obj.numMines);
                didSet = true;
            end
        end

        function didSet = setDamageRadius(obj, damageRadius)
            didSet = false;
            if nargin>1 && ~isempty(damageRadius) && damageRadius>= 0
                obj.mineDamageRange = floor(damageRadius);
                obj.minefield.setDamageRadius(obj.mineDamageRange);
                didSet = true;
            end
        end        

        function didSet = setDetectionRadius(obj, detectRange)
            didSet = false;
            if nargin>1 && ~isempty(detectRange) && detectRange>= 0
                obj.mineDetectionRange = floor(detectRange);
                obj.minefield.setDetectionRange(obj.mineDetectionRange);
                didSet = true;
            end
        end        
        
        function didSet = setNumShips(obj, numShips)
            didSet = false;
            if nargin>1 && ~isempty(numShips) && numShips>= 0
                obj.numShips = floor(numShips);
                obj.fleet.setNumShips(obj.numShips);
                didSet = true;
            end
        end

        % TODO - talk with @hyatt about the updateFleetPosition method and
        % detection of detonations ...
        function update(obj)
            % Update fleet position
            obj.updateFleetPosition();
            
            % Update minefield
            obj.minefield.update();
            
            % Check for mine detonations
            obj.detectMineDetonations();
        end
        
        function updateFleetPosition(obj)
            % Assuming fleet has a method to update position
            newPosition = [0, 0]; % Placeholder
            obj.fleet.updatePosition(newPosition);
        end
        

        % TODO - discuss possible misconception with this method with @hyatt
        function detectMineDetonations(obj)
            for i = 1:obj.numShips
                ship = obj.fleet.graphicsHandle.Ships(i);
                if obj.minefield.isInDamageRange(ship.PositionX, ship.PositionY)
                    obj.minefield.mineExplosion(i);
                end
            end
        end
        
        % TODO - discuss @hyatt why obj.fleet.startEndShips may need to be
        % removed or not
        function changeFleetBehavior(obj, newBehavior)
            obj.fleet.changeBehavior(newBehavior);
            % Recalculate ship starts and ends based on new behavior
            obj.fleet.startEndShips();
        end
    end
end